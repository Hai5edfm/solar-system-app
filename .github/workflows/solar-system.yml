name: Solar System Workflow
on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'
jobs:
  unit-testing:
    name: Unit Testing
    services:
      mongo_db:
        image: siddharth67/mongo-db:non-prod
        ports: ['27017:27017']
    env:
      MONGO_URI: mongodb://localhost:27017/superData
      MONGO_USERNAME: non-prod-user
      MONGO_PASSWORD: non-prod-password
    strategy:
      matrix:
        nodejs_version: [18, 20]
        operating_system: [ubuntu-latest]
        # exclude:
        #   - nodejs_version: 18
        #     operating_system: windows-latest
    runs-on: ${{ matrix.operating_system }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup NodeJS Version - ${{ matrix.nodejs_version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.nodejs_version }}
      - name: Cache NPM dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install Dependencies
        run: npm install
      - name: Unit Testing
        id: node_js_unit_test
        run: npm test   
      - name: Archive Test Result
        # if: failure() && (steps.node_js_unit_test.outcome == 'failure' || steps.node_js_unit_test.conclusion == 'success')
        uses: actions/upload-artifact@v3
        with:
          name: Mocha-Test-Result
          path: test-results.xml
  code-coverage:
    name: Code Coverage
    container:
      image: node:18
    services:
      mongo_db:
        image: siddharth67/mongo-db:non-prod
        options: 
          --name mongo
    env:
      MONGO_URI: mongodb://mongo:27017/superData
      MONGO_USERNAME: non-prod-user
      MONGO_PASSWORD: non-prod-password

    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      # - name: Setup NodeJS Version - 18
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: 18
      - name: Cache NPM dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install Dependencies
        run: npm install

      - name: Check code coverage
        continue-on-error: true
        run: npm run coverage

      - name: Archive Code Coverage
        uses: actions/upload-artifact@v3
        with:
          name: Code-Coverage-Report
          path: coverage
          retention-days: 5
  report-s3:
    needs: [code-coverage, unit-testing]
    name: AWS S3 - Upload Reports
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Download Mocha Test Artifact
        uses: actions/download-artifact@v3
        with:
          name: Mocha-Test-Result
      - name: Download Code Coverage Artifact
        uses: actions/download-artifact@v3
        with:
          name: Code-Coverage-Report
      - name: Merge Test Files
        run: |
          ls -ltr
          mkdir reports-${{ github.sha }}
          mv cobertura-coverage.xml reports-${{ github.sha }}/
          mv test-results.xml reports-${{ github.sha }}/
          ls -ltr reports-${{ github.sha }}/
      - name:  Upload to AWS S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: github-actions-test-haise
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'us-east-2'
          SOURCE_DIR: 'reports-${{ github.sha }}'
          DEST_DIR: 'reports-${{ github.sha }}'
  docker:
    name: Containerize Application
    needs: [unit-testing, code-coverage]
    permissions:
      packages: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Set repository owner in lowercase
        id: set_lowercase_owner
        run: echo "::set-output name=lowercase_owner::${GITHUB_REPOSITORY_OWNER,,}"

      - name: Dockerhub login
        uses: docker/login-action@v2.2.0
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: GHCR login
        uses: docker/login-action@v2.2.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Docker Build for testing
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
      - name: Docker Image Testing
        run: |
          docker images
          docker run --name solar-system-app -d \
            -p 3000:3000 \
            -e MONGO_URI=$MONGO_URI \
            -e MONOG_USERNAME=$MONGO_USERNAME \
            -e MONGO_PASSWORD=$MONGO_PASSWORD \
            ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

          export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
          echo $IP

          echo Testing Image URL using wget
          wget -q -O - 127.0.0.1:3000/live | grep live

      - name: Container Registry Push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: | 
            ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
            ghcr.io/${{ steps.set_lowercase_owner.outputs.lowercase_owner }}/solar-system:${{ github.sha }}
  dev-deploy:
    if: contains(github.ref, 'feature/')
    needs: [docker]
    uses: ./.github/workflows/reusable-deployment.yml
    secrets:
      k8s-kubeconfig: ${{ secrets.KUBECONFIG }}
      mongodb-password: ${{ secrets.MONGO_PASSWORD }}
    with:
      mongodb-url: ${{ vars.MONGO_URI }}
      environment: Development
      kubectl-version: 'v1.26.0'
      k8s-manifest-dir: 'kubernetes/development/'

  integration-testing:
    if: contains(github.ref, 'feature/')
    name: Dev Integration testing
    needs: [dev-deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Test URL output using CURL and JQ
        env:
          URL: ${{ needs.dev-deploy.outputs.application-url }}
        run: |
          echo ${{ env.URL }}
          echo "----------------------"
          curl https://${{ env.URL }}/live -s -k | jq -r .status | grep -i live
  prod-deploy:
    if: github.ref == 'refs/heads/main'
    name: Deploy to Prod Environment
    needs: [docker]
    uses: ./.github/workflows/reusable-deployment.yml
    secrets:
      k8s-kubeconfig: ${{ secrets.KUBECONFIG }}
      mongodb-password: ${{ secrets.MONGO_PASSWORD }}
    with:
      mongodb-url: ${{ vars.MONGO_URI }}
      environment: Production
      kubectl-version: 'v1.26.0'
      k8s-manifest-dir: 'kubernetes/production/'
  prod-testing:
    if: github.ref == 'refs/heads/main'
    name: Production Integration testing
    needs: [prod-deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Test URL output using CURL and JQ
        env:
          URL: ${{ needs.prod-deploy.outputs.application-url }}
        run: |
          echo ${{ env.URL }}
          echo "----------------------"
          curl https://${{ env.URL }}/live -s -k | jq -r .status | grep -i live


